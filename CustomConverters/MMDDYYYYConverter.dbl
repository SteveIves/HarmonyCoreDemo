
import System
import Harmony.Core.Converters
import System.Text.RegularExpressions

namespace Harmony.Core.Converters

    ;;; <summary>
    ;;; Convert between a D8 MMDDYYYY field and a YYYY-MM-DD string.
    ;;; </summary>
    public static class MMDDYYYYConverter

        ;;; <summary>
        ;;; Convert from MMDDYYYY date to YYYY-MM-DD
        ;;; </summary>
        ;;; <param name="mmyyDate">MMDDYYYY date to convert</param>
        ;;; <returns>Returns YYYY-MM or an empty string if the data is invalid</returns>
        public static method Convert, string
            required in group mmyyDate, d8 ;MMDDYYYY
                mm,     d2
                dd,     d2
                yyyy,   d4
            endgroup
        proc
            ;Validate the data
            try
            begin
                new DateTime((int)yyyy,(int)mm,(int)dd)
            end
            catch (e, @Exception)
            begin
                mreturn String.Empty
            end
            endtry

            ;Return YYYY-MM-DD
            mreturn %string(yyyy,"XXXX") + "-" + %string(mm,"XX") + "-" + %string(dd,"XX")

        endmethod

        ;;; <summary>
        ;;; Convert from the EXPOSED format to the STORAGE format.
        ;;; Convert from a YYYY-MM-DD value to a MMDDYYYY value.
        ;;; </summary>
        ;;; <param name="theDate">YYYY-MM-DD value to convert.</param>
        ;;; <returns>Returns MMDDYYYY or 00000000 of the data is invalid</returns>
        public static method ConvertBack, a
            required in group theDate, a10 ;YYYY-MM-DD
                yyyy,   d4
                ,       a1
                mm,     d2
                ,       a1
                dd,     d2
            endgroup
        proc
            ;Validate inbound data
            data rx = new Regex("^\d{4}\-(0?[1-9]|1[012])\-(0?[1-9]|[12][0-9]|3[01])$")
            if (String.IsNullOrWhiteSpace(theDate) || !rx.IsMatch(theDate))
            begin
                mreturn "00000000"
            end

            ;Return MMDDYYYY
            mreturn %string(mm,"XX") + %string(dd,"XX") + %string(yyyy,"XXXX")

        endmethod

        ;;; <summary>
        ;;; Convert from the publicly exposed value back to the storage value.
        ;;; </summary>
        public class LiteralFormatter implements ILiteralFormatter

            public virtual method FormatLiteral, string
                inputLiteral, string 
            proc
                mreturn MMYYConverter.ConvertBack(inputLiteral)
            endmethod

        endclass

    endclass

endnamespace
