;;*****************************************************************************
;;
;; Title:       ItemsController.dbl
;;
;; Description: OData controller for the ITEMS structure.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Microsoft.AspNetCore.Http
import Microsoft.OData
import Microsoft.AspNetCore.JsonPatch
import Microsoft.AspNetCore.Mvc
import Microsoft.AspNetCore.OData.Routing.Controllers
import Microsoft.AspNetCore.OData.Routing.Attributes
import Microsoft.AspNetCore.OData.Query
import Microsoft.AspNetCore.OData.Results
import Microsoft.AspNetCore.OData.Formatter
import Microsoft.EntityFrameworkCore
import Microsoft.EntityFrameworkCore.Infrastructure
import Microsoft.Extensions.Options
import System.Collections.Generic
import System.ComponentModel.DataAnnotations
import System.Net.Mime
import Harmony.Core.EF.Extensions
import Harmony.Core.Interface
import Harmony.OData
import Harmony.AspNetCore
import Newtonsoft.Json
import Services.Models

namespace Services.Controllers

    {Produces("application/json")}
    ;;; <summary>
    ;;; Item master record
    ;;; </summary>
    ;;; <remarks>
    ;;; OData endpoints for Item master record
    ;;; </remarks>
    public partial class ItemsController extends ODataController
    
        ;;Services provided via dependency injection
        private _DbContext, @Services.Models.DBContext
        private _ServiceProvider, @IServiceProvider
        private _AppSettings, @IOptions<AppSettings>

        ;;; <summary>
        ;;; Constructs a new instance of ItemsController
        ;;; </summary>
        ;;; <param name="aDbContext">Database context instance (DI)</param>
        ;;; <param name="aServiceProvider">Service provider instance (DI)</param>
        ;;; <param name="aAppSettings">Application settings</param>
        public method ItemsController
            aDbContext, @Services.Models.DBContext
            aServiceProvider, @IServiceProvider
            aAppSettings, @IOptions<AppSettings>
        proc
            this._DbContext = aDbContext
            this._ServiceProvider = aServiceProvider
            this._AppSettings = aAppSettings
        endmethod

        {HttpGet("Items")}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(IEnumerable<Items>),StatusCodes.Status200OK)}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Query the entire collection of records
        ;;; </summary>
        ;;; <remarks>
        ;;;
        ;;; </remarks>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        ;;; <response code="200">OK. The operation completed successfully.</response>
        ;;; <response code="500">Internal server error. Report the issue to the API maintainer.</response>
        public method GetItems, @IActionResult
        proc
            mreturn Ok(_DbContext.Items.AsNoTracking())
        endmethod

        {HttpGet("Items(ItemNumber={aItemNumber})")}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(Items),StatusCodes.Status200OK)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Query a single record identified by unique primary key
        ;;; </summary>
        ;;; <remarks>
        ;;;
        ;;; </remarks>
        ;;; <param name="aItemNumber" example="19">Item number</param>
        ;;; <returns>Returns a SingleResult indicating the status of the operation and containing any data that was returned.</returns>
        ;;; <response code="200">OK. The operation completed successfully.</response>
        ;;; <response code="404">Not found. The entity being addressed does not exist.</response>
        ;;; <response code="500">Internal server error. Report the issue to the API maintainer.</response>
        public method GetItemsByPK, @SingleResult<Items>
            required in aItemNumber, int
        proc
            mreturn new SingleResult<Items>(_DbContext.Items.AsNoTracking().FindQuery<Items>(_DbContext,aItemNumber))
        endmethod

        {HttpGet("Items(VendorNumber={aVendorNumber})")}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(IEnumerable<Items>),StatusCodes.Status200OK)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Query a subset of records identified by non-unique alternate key VendorNumber
        ;;; </summary>
        ;;; <remarks>
        ;;;
        ;;; </remarks>
        ;;; <param name="aVendorNumber" example="41">Vendor number</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        ;;; <response code="200">OK. The operation completed successfully.</response>
        ;;; <response code="404">Not found. The entity being addressed does not exist.</response>
        ;;; <response code="500">Internal server error. Report the issue to the API maintainer.</response>
        public method GetItemsByVendorNumber, @IActionResult
            required in aVendorNumber, int
        proc
            data result = _DbContext.Items.AsNoTracking().FindAlternate("VendorNumber",aVendorNumber)
            if (result == ^null)
                mreturn NotFound()

            mreturn Ok(result)
        endmethod

        {HttpGet("Items(FlowerColor={aFlowerColor})")}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(IEnumerable<Items>),StatusCodes.Status200OK)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Query a subset of records identified by non-unique alternate key Color
        ;;; </summary>
        ;;; <remarks>
        ;;;
        ;;; </remarks>
        ;;; <param name="aFlowerColor" example="Red">Flower color</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        ;;; <response code="200">OK. The operation completed successfully.</response>
        ;;; <response code="404">Not found. The entity being addressed does not exist.</response>
        ;;; <response code="500">Internal server error. Report the issue to the API maintainer.</response>
        public method GetItemsByColor, @IActionResult
            required in aFlowerColor, String
        proc
            data result = _DbContext.Items.AsNoTracking().FindAlternate("FlowerColor",aFlowerColor)
            if (result == ^null)
                mreturn NotFound()

            mreturn Ok(result)
        endmethod

        {HttpGet("Items(Size={aSize})")}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(IEnumerable<Items>),StatusCodes.Status200OK)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Query a subset of records identified by non-unique alternate key Size
        ;;; </summary>
        ;;; <remarks>
        ;;;
        ;;; </remarks>
        ;;; <param name="aSize" example="5">Size in gallons</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        ;;; <response code="200">OK. The operation completed successfully.</response>
        ;;; <response code="404">Not found. The entity being addressed does not exist.</response>
        ;;; <response code="500">Internal server error. Report the issue to the API maintainer.</response>
        public method GetItemsBySize, @IActionResult
            required in aSize, int
        proc
            data result = _DbContext.Items.AsNoTracking().FindAlternate("Size",aSize)
            if (result == ^null)
                mreturn NotFound()

            mreturn Ok(result)
        endmethod

        {HttpGet("Items(CommonName={aCommonName})")}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(IEnumerable<Items>),StatusCodes.Status200OK)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Query a subset of records identified by non-unique alternate key Name
        ;;; </summary>
        ;;; <remarks>
        ;;;
        ;;; </remarks>
        ;;; <param name="aCommonName" example="European Hackberry">Common name</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        ;;; <response code="200">OK. The operation completed successfully.</response>
        ;;; <response code="404">Not found. The entity being addressed does not exist.</response>
        ;;; <response code="500">Internal server error. Report the issue to the API maintainer.</response>
        public method GetItemsByName, @IActionResult
            required in aCommonName, String
        proc
            data result = _DbContext.Items.AsNoTracking().FindAlternate("CommonName",aCommonName)
            if (result == ^null)
                mreturn NotFound()

            mreturn Ok(result)
        endmethod

    endclass

endnamespace
