<?xml version='1.0'?>
<!--Generated by xmldoc v12.4.1 on 27 JUN 2025 15:23:05-->
<doc>
  <assembly>
    <name>Services</name>
  </assembly>
  <members>
    <member name="T:Services.BridgeNoContextReuseLocal`1">
       <summary>
       Using this alternate ExternalContextPool disables the reuse of contexts within a Traditional
       Bridge context pool in LOCAL environments. This should only be used as a last resort, in
       stateful environments where connections cannot be reused. Disabling pooling will negatively
       impact performance and scalability of the traditional bridge environment.
       </summary>
    </member>
    <member name="M:Services.BridgeNoContextReuseLocal`1.ReturnContext(Services.BridgeNoContextReuseLocal{T}.T)">
       <summary>
       Ensure that used contexts are not returned to the pool.
       </summary>
       <param name="context">The context being returned to the pool.</param>
    </member>
    <member name="T:Services.BridgeNoContextReuseRemote`1">
       <summary>
       Using this alternate RemoteExternalContextPool disables the reuse of contexts within a Traditional
       Bridge context pool in REMOTE environments. This should only be used as a last resort, in
       stateful environments where connections cannot be reused. Disabling pooling will negatively
       impact performance and scalability of the traditional bridge environment.
       </summary>
    </member>
    <member name="M:Services.BridgeNoContextReuseRemote`1.ReturnContext(Services.BridgeNoContextReuseRemote{T}.T)">
       <summary>
       Ensure that used contexts are not returned to the pool.
       </summary>
       <param name="context">The context being returned to the pool.</param>
    </member>
    <member name="T:Services.EdmBuilder">
       <summary>
       Builds an entity framework entity data model.
       </summary>
    </member>
    <member name="M:Services.EdmBuilder.GetEdmModel(Microsoft.OData.ModelBuilder.ODataModelBuilder,System.IServiceProvider)">
       <summary>
       Gets the entity data model.
       </summary>
    </member>
    <member name="T:Services.Filters.ModelStateValidationFilter">
       <summary>
       This ActionFilter can be plugged in to the ASP.NET pipeline
       to validate all inbound models. If a model is founnd to be
       invlaid then an HTTP 400 (Bad request) is returned to the client.
       </summary>
    </member>
    <member name="T:Services.Startup">
       <summary>
       Service startup code
       </summary>
    </member>
    <member name="P:Services.Startup.LogicalNames">
       <summary>
       This property will be populated later by the default SelfHostEnvironment class.
       It wil contain a list of all of the logical names used to locate data files in the repository.
       This information can be useful if implementing a custom FileSpecResolver class, which is done
       in the Services Assembly, which is why the collection is defined here.
       </summary>
    </member>
    <member name="M:Services.Startup.#ctor(Microsoft.AspNetCore.Hosting.IHostingEnvironment,Microsoft.Extensions.Configuration.IConfiguration)">
       <summary>
       Constructor
       </summary>
       <param name="env">HTTP hosting environment</param>
       <param name="config">Configuration data</param>
    </member>
    <member name="M:Services.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
       <summary>
       This methoid is used to make services available to the application.
       These services are typically accessed via dependency injection in controller classes.
       The primary purpose of the ConfigureServices method is as a place to register
       implementations of types for services that are needed by the application.
       It is also used to configure any options related to those services.
       </summary>
       <param name="services">Collection of available services.</param>
    </member>
    <member name="M:Services.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IHostingEnvironment)">
       <summary>
       This method is used to configure the ASP.NET WebApi request pipeline.
       </summary>
       <param name="app">IApplicationBuilder component that configures the request pipeline by having middleware added to it.</param>
       <param name="env">IHostingEnvironment that exposes information about the environment that is hosting the application.</param>
    </member>
    <member name="M:Services.Startup.ConfigureServicesCustom(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
       <summary>
       Declare the ConfigueServicesCustom partial method.
       Developers can implement this method in a partial class to provide custom services.
       </summary>
       <param name="services"></param>
    </member>
    <member name="M:Services.Startup.ConfigureRouting(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder)">
       <summary>
       Declare the ConfigureRouting partial method.
       Developers can implement this method in a partial class to provide custom routing configuration.
       </summary>
       <param name="services"></param>
    </member>
    <member name="M:Services.Startup.ConfigureCustom(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IHostingEnvironment)">
       <summary>
       Declare the ConfigueCustom partial method
       Developers can implement this method in a partial class to provide custom configuration.
       </summary>
       <param name="app"></param>
       <param name="env"></param>
    </member>
    <member name="M:Services.Startup.ConfigureCustomBeforeMvc(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IHostingEnvironment)">
       <summary>
       Declare the ConfigueCustom partial method called immediately before AddMvc
       Developers can implement this method in a partial class to provide custom configuration.
       </summary>
       <param name="app"></param>
       <param name="env"></param>
    </member>
    <member name="M:Services.Startup.MvcConfigCustom(Microsoft.AspNetCore.Mvc.MvcOptions)">
       <summary>
       Declare the MvcConfigCustom partial method
       Developers can use this to inject custom options into the MVC environemnt
       </summary>
       <param name="options">MVC options</param>
    </member>
    <member name="M:Services.Startup.AddDataObjectMappingsCustom(Harmony.Core.Context.DataObjectProvider)">
       <summary>
       Declare the AddDataObjectMappingsCustom partial method
       Developers can use this to inject additional data object mappings
       </summary>
       <param name="serviceProvider">Data object provider</param>
    </member>
    <member name="M:Services.Startup.AddCustomMimeTypes(Microsoft.AspNetCore.StaticFiles.FileExtensionContentTypeProvider)">
       <summary>
       Declare the AddCustomMimeTypes partial method.
       Developers can use this to add support for custom mime types to the kestrel server
       </summary>
       <param name="provider">Returns an instance of FileExtensionContentTypeProvider</param>
    </member>
    <member name="M:Services.Startup.activityOptions(System.Diagnostics.Activity,Microsoft.AspNetCore.Http.HttpRequest)">
       <summary>
       OpenTelemetry configuration method (see above)
       </summary>
    </member>
    <member name="M:Services.Startup.instrumentationOptions(OpenTelemetry.Instrumentation.AspNetCore.AspNetCoreTraceInstrumentationOptions)">
       <summary>
       OpenTelemetry configuration method (see above)
       </summary>
    </member>
  </members>
</doc>
